1,2,¿Qué línea falta para completar correctamente la herencia entre las clases?,class Gato extends Animal,class Gato implements Animal,class Animal extends Gato,class Gato inherits Animal,1
2,2,En el siguiente código falta una implementación. ¿Cuál es la opción correcta?,Implementar el método hacerSonido() en la clase Perro,Hacer abstracto el método hacerSonido() en Animal,Quitar el constructor de Animal,Declarar Perro como abstracto,1
3,2,Si se considera que la clase Alumno hereda de la clase Persona. En el método main() se plantea lo siguiente: ¿Cual es el retorno de ese código?,A,B,AB,Sin retorno,3
4,2,Si consideramos que las siguientes clases: - Persona implementa los métodos públicos hablar() y caminar() - Profesor implementa los métodos enseñar() y hereda de clase Persona - Futbolista implementa los métodos jugar() y hereda de clase Persona Dado el siguiente código: ¿Que ocurre con la línea indicada?,Error del compilador ya que no encuentra el método jugar() en clase Persona,Ejecuta la implementación del método jugar() de la clase Futbolista,Ejecuta método jugar() vacío,Error de compilación ya que no es posible instanciar Futbolista en variable de tipo Persona,1
5,2,Si consideramos que las siguientes clases: A implementa los métodos protegidos ejecutar(int proceso) y finalizar() B implementa el método protegido ejecutar(String proceso) y hereda de clase A Dado el siguiente código: ¿Que ocurre?,Invoca método ejecutar implementado en la clase B debido a que sobrescribe el método de clase A,Error de compilación ya que no es posible ejecutar método de clase B porque está protegido,Invoca método ejecutar implementado en la clase A debido a que hereda de esa clase,Error en tiempo de ejecución ya que no es posible instanciar un objeto de tipo B en variable de tipo A,3
6,2,Si se considera que la clase Perro hereda de la clase Mascota. En el método main() se plantea lo siguiente: ¿Que ocurre?,Realiza casting de instancia de Perro a variable de tipo Perro pero pierde propiedades de Mascota,Realiza casting de variable de tipo Mascota que referencia a instancia de tipo Perro,Error de compilación ya que el casting es inválido,Error en tiempo de ejecución ya que el casting está mal aplicado,2
7,2,Dado el siguiente extracto de código: ¿Qué cosa podemos asumir?,Spin tiene al menos un constructor donde ingresan tres parámetros float,La variable angle solo puede ser private ya que de lo contrario el código no compilaría,Los métodos 'translate' 'rotate' y 'popMatrix' provienen de una interface,La variable speed siempre será null porque no se muestra su inicialización en el código,1
8,2,Considere la siguiente implementación para detectar errores de código. Indique en que líneas se produce error de compilación,3 y 5,3 y 6,5 y 6,Solo 6,4
9,2,Considere la siguiente implementación (imagen izq.). En método main se realiza(imagen der.): ¿Que imprime por pantalla?,INICIAR,FIN-AHORA,SALIR-AHORA,Error de compilación,3
10,2,Al ejecutar el siguiente programa ¿qué salida se obtiene en consola?,"Soy un coche","Soy un vehículo",Error de compilación,No imprime nada,1
11,2,¿Qué muestra en pantalla el siguiente código de herencia?,"El perro ladra","El animal hace un sonido",Error por método duplicado,NullPointerException,1
12,2,¿Cuál es el error en el siguiente código que define una clase base Animal y una clase hija Perro?,Falta usar extends en la clase hija,Falta un constructor vacío en la clase base,No se pueden definir atributos privados en la clase padre,El método main debe ser estático en la clase padre,1
13,2,Observa el código. ¿Cuál de las siguientes opciones es correcta?,El código no tiene errores y logra compilar y ejecutar correctamente,La clase padre debería ser abstracta,Es obligatorio que los métodos de la clase padre sean final,La clase hija no puede tener métodos propios,1
14,3,¿Cuál es la relación entre 'Material' 'Libro' y 'Revista'?,Material es la clase padre de la que heredan Libro y Revista,Material es una interfaz implementada por Libro y Revista,Libro y Revista son clases abstractas de las que hereda Material,Libro y Revista son clases independientes sin relación con Material,1
15,3,¿Por qué la clase Empleado se define como abstracta?,Para obligar a las subclases a implementar el método calcularPago(),Para poder instanciar Empleado directamente,Porque Empleado no tiene atributos,Para indicar que Empleado es una interfaz,1
16,3,¿Qué significa que la clase PagoTarjeta implemente la interfaz Pago?,PagoTarjeta debe definir el método procesarPago() como lo declara Pago,PagoTarjeta hereda todos los atributos de Pago,PagoTarjeta no puede usar procesarPago(),Pago es una clase abstracta y PagoTarjeta la instancia directamente,1
17,3,¿Qué tipo de relación existe entre Universidad y Facultad?,Asociación "uno a muchos" donde una universidad tiene varias facultades,Herencia simple,Implementación de interfaz,Dependencia débil que no se muestra en el diagrama,1
18,3,¿Cuál es la función de la clase Vehiculo?,Es una clase padre que comparte atributos y métodos con Bus y Taxi,Es una interfaz que Bus y Taxi implementan,Es una clase que depende de Bus y Taxi para funcionar,Es una clase abstracta que no tiene métodos ni atributos,1
19,3,¿Cómo se relacionan 'Paciente' 'Medico' y 'Cita'?,Cada Paciente puede tener múltiples Citas y cada Cita está asociada a un Medico,Cada Paciente hereda de Cita y Medico,Cada Medico implementa la interfaz Paciente,Cita es clase abstracta que controla Paciente y Medico,1
20,3,Si se considera que la clase Automovil hereda de la clase Vehículo. ¿Cuál de las siguientes afirmaciones es correcta?,Vehículo es subclase de Automóvil,Automóvil es clase hija de Vehículo,Automóvil es superclase de Vehículo,Vehículo no puede ser clase base,2
21,3,En un programa de Java se tiene una superclase llamada Persona y dos subclases llamadas Alumno y Profesor. Tanto Alumno como Profesor heredan de Persona. Selecciona la única declaración/instanciación que refleja correctamente el uso de herencia y polimorfismo:,Persona p = new Persona();,Profesor p = new Persona();,Profesor p = new Alumno();,Persona p = new Alumno();,4
22,1,¿Qué es la herencia en Java?,Un mecanismo que permite que una clase adquiera atributos y métodos de otra,Una forma de copiar automáticamente todo el código de una clase a otra,Un proceso exclusivo para heredar solo variables estáticas,Una técnica que se usa únicamente con interfaces,1
23,1,¿Qué palabra reservada se utiliza en Java para heredar de otra clase?,extends,inherits,superclass,derive,1
24,1,¿Cómo se llama la clase de la cual se heredan atributos y métodos?,Superclase,Subclase,Interface,Clase abstracta obligatoriamente,1
25,1,¿Qué limitación tiene Java respecto a la herencia de clases?,No permite herencia múltiple de clases,No permite heredar constructores,No permite heredar métodos públicos,No permite heredar variables de instancia,1
26,1,¿Cuál de las siguientes afirmaciones describe correctamente la herencia soportada en Java?,Java permite herencia simple de clases y múltiple de interfaces,Java permite herencia múltiple de clases e interfaces,Java solo permite herencia múltiple de clases,Java no soporta herencia en absoluto,1
27,1,¿Qué significa sobrescribir (override) un método en Java?,Redefinir un método heredado en la subclase con la misma firma pero con un comportamiento distinto,Copiar un método de la superclase a la subclase sin cambios,Crear un método con el mismo nombre pero diferente número de parámetros,Borrar un método de la superclase desde la subclase,1
28,1,¿Cómo se invoca el constructor de una superclase desde la subclase?,Usando la palabra clave super(),Usando la palabra clave base(),Usando la palabra clave extends(),Llamando directamente al nombre de la superclase,1
29,1,¿Qué relación existe entre herencia y polimorfismo en Java?,El polimorfismo permite usar un objeto de la subclase como si fuera de la superclase,El polimorfismo no depende de la herencia,La herencia y el polimorfismo son exactamente lo mismo,El polimorfismo elimina la necesidad de herencia,1
30,1,¿Para qué se utiliza la palabra clave super en herencia?,Para acceder a los miembros de la superclase desde la subclase,Para definir que una clase es la clase principal del programa,Para acceder a los miembros de la subclase,Para crear una nueva clase independiente,1
31,1,En un método de una subclase es posible invocar métodos de la superclase. Sin embargo esto depende de los modificadores de acceso y de la forma en que se invoquen dichos métodos. Considerando esto ¿cuál de las siguientes no permitiria a una hija acceder a los metodos de su padre?,Los métodos de la clase padre sean public,Los métodos de la clase padre sean protected,Los métodos de la clase padre sean private,Los métodos sean invocados con la palabra reservada super(),3
32,1,En relación con la herencia en Java selecciona la única afirmación correcta:,Java soporta herencia multinivel,La clase debe ser de caracter final,Java soporta herencia múltiple,La superclase es quien hereda las propiedades de una subclase,1
33,1,Una clase derivada no hereda:,Propiedades protegidas y constructores,Propiedades privadas y constructores,Propiedades tanto privadas como protegidas y constructores,Propiedades independiente del modificador de visibilidad y constructores,2
34,1,Marque la afirmación correcta:,Los constructores son heredados de la clase padre,Para invocar el constructor de la clase padre se debe realizar utilizando el nombre de la clase,Las clases que no declaran extender a otras extienden de la clase Object,El método super permite invocar métodos de la clase padre,3
35,1,Si se utiliza el modificador de visibilidad protected en variables de instancia y métodos podemos decir que:,Son sólo accesibles desde la misma clase.,Son sólo accesibles desde cualquier subclase de ella,Son accesibles desde la misma clase o cualquier subclase de ella,Son accesibles desde la misma clase o cualquier clase que la instancie,3
36,1,Respecto al uso de herencia. Indique las afirmaciones correctas:,En ningún caso es posible heredar variables protegidas con modificador de visibilidad protected,Para utilizar las variables de instancia de la superclase es necesario declararlas en la subclase,Los constructores públicos son heredados por las subclases,Si existen variables con modificador protected pueden ser utilizadas en la subclase como si hubieran sido declaradas en ella,4