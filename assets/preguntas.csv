1,2,¿Que linea falta para completar correctamente la herencia entre las clases?,class Gato extends Animal,class Gato implements Animal,class Animal extends Gato,class Gato inherits Animal,1
2,2,En el siguiente codigo falta una implementacion. ¿Cual es la opcion correcta?,Implementar el metodo hacerSonido() en la clase Perro,Hacer abstracto el metodo hacerSonido() en Animal,Quitar el constructor de Animal,Declarar Perro como abstracto,1
3,2,Si se considera que la clase Alumno hereda de la clase Persona. En el metodo main() se plantea lo siguiente: ¿Cual es el retorno de ese codigo?,A,B,AB,Sin retorno,3
4,2,Si consideramos que las siguientes clases: - Persona implementa los metodos publicos hablar() y caminar() - Profesor implementa los metodos ensenar() y hereda de clase Persona - Futbolista implementa los metodos jugar() y hereda de clase Persona Dado el siguiente codigo: ¿Que ocurre con la linea indicada?,Error del compilador ya que no encuentra el metodo jugar() en clase Persona,Ejecuta la implementacion del metodo jugar() de la clase Futbolista,Ejecuta metodo jugar() vacio,Error de compilacion ya que no es posible instanciar Futbolista en variable de tipo Persona,1
5,2,Si consideramos que las siguientes clases: A implementa los metodos protegidos ejecutar(int proceso) y finalizar() B implementa el metodo protegido ejecutar(String proceso) y hereda de clase A Dado el siguiente codigo: ¿Que ocurre?,Invoca metodo ejecutar implementado en la clase B debido a que sobrescribe el metodo de clase A,Error de compilacion ya que no es posible ejecutar metodo de clase B porque esta protegido,Invoca metodo ejecutar implementado en la clase A debido a que hereda de esa clase,Error en tiempo de ejecucion ya que no es posible instanciar un objeto de tipo B en variable de tipo A,3
6,2,Si se considera que la clase Perro hereda de la clase Mascota. En el metodo main() se plantea lo siguiente: ¿Que ocurre?,Realiza casting de instancia de Perro a variable de tipo Perro pero pierde propiedades de Mascota,Realiza casting de variable de tipo Mascota que referencia a instancia de tipo Perro,Error de compilacion ya que el casting es invalido,Error en tiempo de ejecucion ya que el casting esta mal aplicado,2
7,2,Dado el siguiente extracto de codigo: ¿Que cosa podemos asumir?,Spin tiene al menos un constructor donde ingresan tres parametros float,La variable angle solo puede ser private ya que de lo contrario el codigo no compilaria,Los metodos 'translate' 'rotate' y 'popMatrix' provienen de una interface,La variable speed siempre sera null porque no se muestra su inicializacion en el codigo,1
8,2,Considere la siguiente implementacion para detectar errores de codigo. Indique en que lineas se produce error de compilacion,3 y 5,3 y 6,5 y 6,Solo 6,4
9,2,Considere la siguiente implementacion (imagen izq.). En metodo main se realiza(imagen der.): ¿Que imprime por pantalla?,INICIAR,FIN-AHORA,SALIR-AHORA,Error de compilacion,3
10,2,Al ejecutar el siguiente programa ¿que salida se obtiene en consola?,"Soy un coche","Soy un vehiculo",Error de compilacion,No imprime nada,1
11,2,¿Que muestra en pantalla el siguiente codigo de herencia?,"El perro ladra","El animal hace un sonido",Error por metodo duplicado,NullPointerException,1
12,2,¿Cual es el error en el siguiente codigo que define una clase base Animal y una clase hija Perro?,Falta usar extends en la clase hija,Falta un constructor vacio en la clase base,No se pueden definir atributos privados en la clase padre,El metodo main debe ser estatico en la clase padre,1
13,2,Observa el codigo. ¿Cual de las siguientes opciones es correcta?,El codigo no tiene errores y logra compilar y ejecutar correctamente,La clase padre deberia ser abstracta,Es obligatorio que los metodos de la clase padre sean final,La clase hija no puede tener metodos propios,1
14,3,¿Cual es la relacion entre 'Material' 'Libro' y 'Revista'?,Material es la clase padre de la que heredan Libro y Revista,Material es una interfaz implementada por Libro y Revista,Libro y Revista son clases abstractas de las que hereda Material,Libro y Revista son clases independientes sin relacion con Material,1
15,3,¿Por que la clase Empleado se define como abstracta?,Para obligar a las subclases a implementar el metodo calcularPago(),Para poder instanciar Empleado directamente,Porque Empleado no tiene atributos,Para indicar que Empleado es una interfaz,1
16,3,¿Que significa que la clase PagoTarjeta implemente la interfaz Pago?,PagoTarjeta debe definir el metodo procesarPago() como lo declara Pago,PagoTarjeta hereda todos los atributos de Pago,PagoTarjeta no puede usar procesarPago(),Pago es una clase abstracta y PagoTarjeta la instancia directamente,1
17,3,¿Que tipo de relacion existe entre Universidad y Facultad?,Asociacion "uno a muchos" donde una universidad tiene varias facultades,Herencia simple,Implementacion de interfaz,Dependencia debil que no se muestra en el diagrama,1
18,3,¿Cual es la funcion de la clase Vehiculo?,Es una clase padre que comparte atributos y metodos con Bus y Taxi,Es una interfaz que Bus y Taxi implementan,Es una clase que depende de Bus y Taxi para funcionar,Es una clase abstracta que no tiene metodos ni atributos,1
19,3,¿Como se relacionan 'Paciente' 'Medico' y 'Cita'?,Cada Paciente puede tener multiples Citas y cada Cita esta asociada a un Medico,Cada Paciente hereda de Cita y Medico,Cada Medico implementa la interfaz Paciente,Cita es clase abstracta que controla Paciente y Medico,1
20,3,Si se considera que la clase Automovil hereda de la clase Vehiculo. ¿Cual de las siguientes afirmaciones es correcta?,Vehiculo es subclase de Automovil,Automovil es clase hija de Vehiculo,Automovil es superclase de Vehiculo,Vehiculo no puede ser clase base,2
21,3,En un programa de Java se tiene una superclase llamada Persona y dos subclases llamadas Alumno y Profesor. Tanto Alumno como Profesor heredan de Persona. Selecciona la unica declaracion/instanciacion que refleja correctamente el uso de herencia y polimorfismo:,Persona p = new Persona();,Profesor p = new Persona();,Profesor p = new Alumno();,Persona p = new Alumno();,4
22,1,¿Que es la herencia en Java?,Un mecanismo que permite que una clase adquiera atributos y metodos de otra,Una forma de copiar automaticamente todo el codigo de una clase a otra,Un proceso exclusivo para heredar solo variables estaticas,Una tecnica que se usa unicamente con interfaces,1
23,1,¿Que palabra reservada se utiliza en Java para heredar de otra clase?,extends,inherits,superclass,derive,1
24,1,¿Como se llama la clase de la cual se heredan atributos y metodos?,Superclase,Subclase,Interface,Clase abstracta obligatoriamente,1
25,1,¿Que limitacion tiene Java respecto a la herencia de clases?,No permite herencia multiple de clases,No permite heredar constructores,No permite heredar metodos publicos,No permite heredar variables de instancia,1
26,1,¿Cual de las siguientes afirmaciones describe correctamente la herencia soportada en Java?,Java permite herencia simple de clases y multiple de interfaces,Java permite herencia multiple de clases e interfaces,Java solo permite herencia multiple de clases,Java no soporta herencia en absoluto,1
27,1,¿Que significa sobrescribir (override) un metodo en Java?,Redefinir un metodo heredado en la subclase con la misma firma pero con un comportamiento distinto,Copiar un metodo de la superclase a la subclase sin cambios,Crear un metodo con el mismo nombre pero diferente numero de parametros,Borrar un metodo de la superclase desde la subclase,1
28,1,¿Como se invoca el constructor de una superclase desde la subclase?,Usando la palabra clave super(),Usando la palabra clave base(),Usando la palabra clave extends(),Llamando directamente al nombre de la superclase,1
29,1,¿Que relacion existe entre herencia y polimorfismo en Java?,El polimorfismo permite usar un objeto de la subclase como si fuera de la superclase,El polimorfismo no depende de la herencia,La herencia y el polimorfismo son exactamente lo mismo,El polimorfismo elimina la necesidad de herencia,1
30,1,¿Para que se utiliza la palabra clave super en herencia?,Para acceder a los miembros de la superclase desde la subclase,Para definir que una clase es la clase principal del programa,Para acceder a los miembros de la subclase,Para crear una nueva clase independiente,1
31,1,En un metodo de una subclase es posible invocar metodos de la superclase. Sin embargo esto depende de los modificadores de acceso y de la forma en que se invoquen dichos metodos. Considerando esto ¿cual de las siguientes no permitiria a una hija acceder a los metodos de su padre?,Los metodos de la clase padre sean public,Los metodos de la clase padre sean protected,Los metodos de la clase padre sean private,Los metodos sean invocados con la palabra reservada super(),3
32,1,En relacion con la herencia en Java selecciona la unica afirmacion correcta:,Java soporta herencia multinivel,La clase debe ser de caracter final,Java soporta herencia multiple,La superclase es quien hereda las propiedades de una subclase,1
33,1,Una clase derivada no hereda:,Propiedades protegidas y constructores,Propiedades privadas y constructores,Propiedades tanto privadas como protegidas y constructores,Propiedades independiente del modificador de visibilidad y constructores,2
34,1,Marque la afirmacion correcta:,Los constructores son heredados de la clase padre,Para invocar el constructor de la clase padre se debe realizar utilizando el nombre de la clase,Las clases que no declaran extender a otras extienden de la clase Object,El metodo super permite invocar metodos de la clase padre,3
35,1,Si se utiliza el modificador de visibilidad protected en variables de instancia y metodos podemos decir que:,Son solo accesibles desde la misma clase.,Son solo accesibles desde cualquier subclase de ella,Son accesibles desde la misma clase o cualquier subclase de ella,Son accesibles desde la misma clase o cualquier clase que la instancie,3
36,1,Respecto al uso de herencia. Indique las afirmaciones correctas:,En ningun caso es posible heredar variables protegidas con modificador de visibilidad protected,Para utilizar las variables de instancia de la superclase es necesario declararlas en la subclase,Los constructores publicos son heredados por las subclases,Si existen variables con modificador protected pueden ser utilizadas en la subclase como si hubieran sido declaradas en ella,4